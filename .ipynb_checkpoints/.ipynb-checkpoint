{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "This project uses a dataset of over 80,000 UFO sightings over the past century.  We will examine, clean and analyze the data nd attempt to find conclusions or patterns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "ufos = pd.read_csv('scrubbed.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Exploration\n",
    "\n",
    "Now, we explore our dataset, taking note of any areas which may need cleaning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 80332 entries, 0 to 80331\n",
      "Data columns (total 11 columns):\n",
      "datetime                80332 non-null object\n",
      "city                    80332 non-null object\n",
      "state                   74535 non-null object\n",
      "country                 70662 non-null object\n",
      "shape                   78400 non-null object\n",
      "duration (seconds)      80332 non-null object\n",
      "duration (hours/min)    80332 non-null object\n",
      "comments                80317 non-null object\n",
      "date posted             80332 non-null object\n",
      "latitude                80332 non-null object\n",
      "longitude               80332 non-null float64\n",
      "dtypes: float64(1), object(10)\n",
      "memory usage: 6.7+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "      <th>shape</th>\n",
       "      <th>duration (seconds)</th>\n",
       "      <th>duration (hours/min)</th>\n",
       "      <th>comments</th>\n",
       "      <th>date posted</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8942</th>\n",
       "      <td>11/13/2008 18:00</td>\n",
       "      <td>corvallis</td>\n",
       "      <td>or</td>\n",
       "      <td>us</td>\n",
       "      <td>diamond</td>\n",
       "      <td>60</td>\n",
       "      <td>1 minute</td>\n",
       "      <td>a shooting star that turned into a UFO</td>\n",
       "      <td>1/10/2009</td>\n",
       "      <td>44.5647222</td>\n",
       "      <td>-123.260833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9461</th>\n",
       "      <td>11/15/2002 00:45</td>\n",
       "      <td>swadlincote derby&amp;#44 uk (near)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>flash</td>\n",
       "      <td>180</td>\n",
       "      <td>3 mins</td>\n",
       "      <td>SIGHTING NEAR SWADLINCOTE DERBYSHIRE</td>\n",
       "      <td>11/20/2002</td>\n",
       "      <td>52.771318</td>\n",
       "      <td>-1.554997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78181</th>\n",
       "      <td>9/28/2003 18:00</td>\n",
       "      <td>gasp&amp;eacute; (canada)</td>\n",
       "      <td>pq</td>\n",
       "      <td>NaN</td>\n",
       "      <td>fireball</td>\n",
       "      <td>120</td>\n",
       "      <td>2 minutes</td>\n",
       "      <td>Bright orange fireball with long orange tail s...</td>\n",
       "      <td>10/7/2003</td>\n",
       "      <td>48.8316</td>\n",
       "      <td>-64.486902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79042</th>\n",
       "      <td>9/3/2013 21:30</td>\n",
       "      <td>lincoln city</td>\n",
       "      <td>or</td>\n",
       "      <td>us</td>\n",
       "      <td>light</td>\n",
       "      <td>120</td>\n",
       "      <td>few minutes</td>\n",
       "      <td>Bright red to dark slow flashing.</td>\n",
       "      <td>9/9/2013</td>\n",
       "      <td>44.9583</td>\n",
       "      <td>-124.016667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24565</th>\n",
       "      <td>1/4/2009 13:30</td>\n",
       "      <td>san jose</td>\n",
       "      <td>ca</td>\n",
       "      <td>us</td>\n",
       "      <td>circle</td>\n",
       "      <td>1</td>\n",
       "      <td>1m 15 seconds</td>\n",
       "      <td>It was 1 : 30 pm  me and my wife where standin...</td>\n",
       "      <td>1/10/2009</td>\n",
       "      <td>37.3394444</td>\n",
       "      <td>-121.893889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               datetime                             city state country  \\\n",
       "8942   11/13/2008 18:00                        corvallis    or      us   \n",
       "9461   11/15/2002 00:45  swadlincote derby&#44 uk (near)   NaN     NaN   \n",
       "78181   9/28/2003 18:00            gasp&eacute; (canada)    pq     NaN   \n",
       "79042    9/3/2013 21:30                     lincoln city    or      us   \n",
       "24565    1/4/2009 13:30                         san jose    ca      us   \n",
       "\n",
       "          shape duration (seconds) duration (hours/min)  \\\n",
       "8942    diamond                 60             1 minute   \n",
       "9461      flash                180               3 mins   \n",
       "78181  fireball                120            2 minutes   \n",
       "79042     light                120          few minutes   \n",
       "24565    circle                  1        1m 15 seconds   \n",
       "\n",
       "                                                comments date posted  \\\n",
       "8942              a shooting star that turned into a UFO   1/10/2009   \n",
       "9461                SIGHTING NEAR SWADLINCOTE DERBYSHIRE  11/20/2002   \n",
       "78181  Bright orange fireball with long orange tail s...   10/7/2003   \n",
       "79042                  Bright red to dark slow flashing.    9/9/2013   \n",
       "24565  It was 1 : 30 pm  me and my wife where standin...   1/10/2009   \n",
       "\n",
       "         latitude  longitude   \n",
       "8942   44.5647222 -123.260833  \n",
       "9461    52.771318   -1.554997  \n",
       "78181     48.8316  -64.486902  \n",
       "79042     44.9583 -124.016667  \n",
       "24565  37.3394444 -121.893889  "
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ufos.info()\n",
    "ufos.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have some missing values to deal with in the 'state', 'country' and 'shape' columns.  For simplicity, we will fill these with the string 'missing' so we can address them later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['TX', 'MISSING', 'HI', 'TN', 'CT', 'AL', 'FL', 'CA', 'NC', 'NY',\n",
       "       'KY', 'MI', 'MA', 'KS', 'SC', 'WA', 'AB', 'CO', 'NH', 'WI', 'ME',\n",
       "       'GA', 'PA', 'IL', 'AR', 'ON', 'MO', 'OH', 'IN', 'AZ', 'MN', 'NV',\n",
       "       'NF', 'NE', 'OR', 'BC', 'IA', 'VA', 'ID', 'NM', 'NJ', 'MB', 'WV',\n",
       "       'OK', 'RI', 'NB', 'VT', 'LA', 'PR', 'AK', 'MS', 'UT', 'MD', 'MT',\n",
       "       'SK', 'WY', 'SD', 'PQ', 'NS', 'QC', 'DE', 'ND', 'DC', 'NT', 'SA',\n",
       "       'YT', 'YK', 'PE'], dtype=object)"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ufos[\"state\"] = ufos[\"state\"].fillna(\"missing\")\n",
    "ufos[\"country\"] = ufos[\"country\"].fillna(\"missing\")\n",
    "ufos[\"shape\"] = ufos[\"shape\"].fillna(\"missing\")\n",
    "\n",
    "upper_states = []\n",
    "for state in ufos[\"state\"]:\n",
    "    upper_states.append(state.upper())\n",
    "ufos[\"state\"] = upper_states\n",
    "\n",
    "ufos[\"state\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis\n",
    "\n",
    "For our first analysis, we want to see results by state, so we are only concerned with the rows which specify 'us' as the country."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'State abbr.')"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "state_counts = ufos[ufos[\"country\"] == \"us\"].state.value_counts().values\n",
    "state_names = ufos[ufos[\"country\"] == \"us\"].state.value_counts().index\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (8,12))\n",
    "ax.barh(state_names, state_counts)\n",
    "ax.set_ylim((-1,52))\n",
    "ax.set_title(\"Count of UFO sightings by US State\")\n",
    "ax.set_xlabel(\"Number of sightings\")\n",
    "ax.set_ylabel(\"State abbr.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next let's look at results by time of year, to see if there are any seasonal trends among UFO sightings.  First we correct for a few erroneous values containing bad characters, then cast to float."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 80332 entries, 0 to 80331\n",
      "Data columns (total 11 columns):\n",
      "datetime                80332 non-null object\n",
      "city                    80332 non-null object\n",
      "state                   80332 non-null object\n",
      "country                 80332 non-null object\n",
      "shape                   80332 non-null object\n",
      "duration (seconds)      65536 non-null float64\n",
      "duration (hours/min)    80332 non-null object\n",
      "comments                80317 non-null object\n",
      "date posted             80332 non-null object\n",
      "latitude                80332 non-null object\n",
      "longitude               80332 non-null float64\n",
      "dtypes: float64(2), object(9)\n",
      "memory usage: 6.7+ MB\n"
     ]
    }
   ],
   "source": [
    "ufos[\"duration (seconds)\"] = ufos[\"duration (seconds)\"].str.replace('`','')\n",
    "ufos[\"duration (seconds)\"] = ufos[\"duration (seconds)\"].astype(float)\n",
    "ufos.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we must extract the season from the date of each sighting.  To do this, we will make a new column for 'month' and also for 'season'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "seasons = []\n",
    "months = []\n",
    "for row in ufos[\"datetime\"]:\n",
    "    split_row = row.split('/')\n",
    "    month = int(split_row[0])\n",
    "    \n",
    "    value = \"\"\n",
    "    if month < 3:\n",
    "        value = \"winter\"\n",
    "    elif month < 6:\n",
    "        value = \"spring\"\n",
    "    elif month < 9:\n",
    "        value = \"summer\"\n",
    "    elif month < 12:\n",
    "        value = \"fall\"\n",
    "    elif month < 13:\n",
    "        value = \"winter\"\n",
    "    else:\n",
    "        value = \"missing\"\n",
    "\n",
    "    months.append(month)\n",
    "    seasons.append(value)\n",
    "\n",
    "ufos[\"month\"] = months\n",
    "ufos[\"season\"] = seasons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Number of Sightings')"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x1440 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "month_numbers = ufos[\"month\"].value_counts().index\n",
    "month_counts = ufos[\"month\"].value_counts().values\n",
    "month_names = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n",
    "month_tick_positions = np.arange(12) + 1\n",
    "\n",
    "season_names = ufos[\"season\"].value_counts().index\n",
    "season_counts = ufos[\"season\"].value_counts().values\n",
    "\n",
    "fig = plt.figure(figsize=(10,20))\n",
    "\n",
    "ax1 = fig.add_subplot(2,1,1)\n",
    "ax2 = fig.add_subplot(2,1,2)\n",
    "\n",
    "ax1.barh(month_numbers, month_counts)\n",
    "ax1.set_title(\"Count of UFO Sightings by Month\")\n",
    "ax1.set_ylabel(\"Month\")\n",
    "ax1.set_xlabel(\"Number of Sightings\")\n",
    "ax1.set_yticks(month_tick_positions)\n",
    "ax1.set_yticklabels(month_names)\n",
    "ax1.invert_yaxis()\n",
    "\n",
    "ax2.barh(season_names, season_counts)\n",
    "ax2.set_title(\"Count of UFO Sightings by Season\")\n",
    "ax2.set_ylabel(\"Season\")\n",
    "ax2.set_xlabel(\"Number of Sightings\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
